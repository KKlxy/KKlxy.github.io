<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++</title>
    <url>/2018/10/05/C++/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><span id="more"></span>
<h2 id="1简介"><a href="#1简介" class="headerlink" title="1简介"></a>1简介</h2><h3 id="1-1-C"><a href="#1-1-C" class="headerlink" title="1.1 C++"></a>1.1 C++</h3><p>C语言代表的过程性语言，C++在C语言的基础上添加的类代表的面向对象语言、C++模板支持的泛型编程。</p>
<h3 id="1-2-C"><a href="#1-2-C" class="headerlink" title="1.2 C"></a>1.2 C</h3><p>汇编语言依赖于计算机的内部机器语言，是低级语言，直接操作硬件；UNIX是高级语言致力于解决问题，不针对特定的硬件，</p>
<p>为了将低级语言的效率、硬件访问能力和高级语言的通用性、可移植性融合在一起，于是在旧语言的基础上开发了C语言</p>
<p>数据是程序使用和处理的信息；算法是程序使用的方法</p>
<p>C强调的是编程的算法方面</p>
<p>C++：OOP(面向对象编程)强调的是数据；C++中类是一种规范，描述了新型数据格式，对象还是根据这种规范构造的特定数据结构，包括数据部分和操作部分，根据类定义可以创建一个对象，该对象保存了描述类的所有数据值，可使用类方法来修改对象。</p>
<p>OOP编程不仅仅是将数据和方法合并为类定义。信息隐藏还可以保护数据，使其免遭不恰当地访问。多态让您为运算符和函数创造多个定义，通过编程上下文来确定使用哪个定义。继承让您能使用旧类派生出新类。</p>
<p>C++是C的超集，C++的二重性及提供了高级抽象，又可以底层访问 </p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><h3 id="3-1-简单变量"><a href="#3-1-简单变量" class="headerlink" title="3.1 简单变量"></a>3.1 简单变量</h3><p>面向对象编程（OOP）的本质是设计并扩展自己的数据类型。</p>
<p>sizeof只是一个运算符，不是函数</p>
<p>sizeof(int类型名)     size of 变量名</p>
<p>int n = 3; int n(3); int n{3}</p>
<p>cout默认以十进制形式输出</p>
<p>cout &lt;&lt; hex 十六进制</p>
<p>cout &lt;&lt; oct 八进制 </p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>浮点数在内存中如何存储？</p>
<p>float 8.25 单精度 32bit</p>
<p>double 64bit</p>
<p>浮点数二进制的科学计数法  8.25 = 8.25*10^0</p>
<p>1000.01   = 1.00001*2^3</p>
<p> 0.25*2=0.5    </p>
<p>0.5*2=1</p>
<p>二进制至少32位，十进制至少小数点后6位</p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>cout.setf(ios_base::fixed, ios_base::floatfield);</p>
<p>因为float的精度不够，float类型有效位有限</p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>C++语言没有提供自动防止超出整数类型范围的功能，需要程序员自己预估数据大小并选择合适的数据类型，每种数据类型的宽度，C++并没有做规定， 具体的值有开发平台和编译器决定。</p>
<p>默认C++整数常量在不超出int类型范围的应用情况下，默认优先使用int类型</p>
<p>不同的平台和编译器对应的long 和long long 类型的大小是不同的，如果long长度位4字节，则存放在double类型中不会出现舍入误差，如果long long类型位8字节，则存放在double类型中会出现舍入误差。</p>
<h2 id="4-复合类型"><a href="#4-复合类型" class="headerlink" title="4 复合类型"></a>4 复合类型</h2>]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32</title>
    <url>/2020/01/25/STM32/</url>
    <content><![CDATA[<h1 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h1><span id="more"></span>

<h1 id="一、Keil创建工程"><a href="#一、Keil创建工程" class="headerlink" title="一、Keil创建工程"></a>一、Keil创建工程</h1><h2 id="1-安装-Keil-uVision4"><a href="#1-安装-Keil-uVision4" class="headerlink" title="1. 安装 Keil uVision4"></a>1. 安装 Keil uVision4</h2><h2 id="2-新建工程"><a href="#2-新建工程" class="headerlink" title="2. 新建工程"></a>2. 新建工程</h2><h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><img src="/2020/01/25/STM32/image-20220115073734659.png" alt="image-20220115073734659" style="zoom:50%;">

]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试相关术语</title>
    <url>/2019/10/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="渗透测试相关术语"><a href="#渗透测试相关术语" class="headerlink" title="渗透测试相关术语"></a>渗透测试相关术语</h1><span id="more"></span>

<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a><strong>IP地址</strong></h4><p>IP地址（Internet Protocol Address）是指互联⽹协议地址，⼜译为⽹际协议地址。IP地址是IP协议提供的⼀种统⼀的地址格式，它为互联⽹上的每⼀个⽹络和每⼀台主机分配⼀个逻辑地址，以此来屏蔽物理地址的差异。渗透测试中，IP地址⼀般出现在服务器、PC、路由交换等设备中，可以把IP地址理解成我们⽣活中的家庭地址。 </p>
<h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a><strong>VPS</strong></h4><p>Virtual Private Server 虚拟专⽤服务器技术，将⼀台服务器分割成多个虚拟专享服务器的优质服务。我 们⼀般⼈通常说的VPS就是⼀台⼈家虚拟出来的服务器，这台服务器有外⽹IP，我们可以装好系统并直接连 接。 </p>
<h4 id="端⼝"><a href="#端⼝" class="headerlink" title="端⼝"></a><strong>端⼝</strong></h4><p>“端⼝”是英⽂port的意译，可以认为是设备与外界通讯交流的进出⼝。 </p>
<h4 id="⼀句话⽊马"><a href="#⼀句话⽊马" class="headerlink" title="⼀句话⽊马"></a><strong>⼀句话⽊马</strong></h4><p>指的是那些代码长度很短的脚本⽊马，⼀般只有⼀⾏，跟平常的⼀句话长度差不多。例如asp的其 中⼀种⼀句话⽊马： &lt;%execute(request(“value”))%&gt; </p>
<h4 id="⼤马"><a href="#⼤马" class="headerlink" title="⼤马"></a><strong>⼤马</strong></h4><p>指的是那些功能很多的脚本⽊马，⼀般都包含但不限于⽂件管理、cmd执⾏、可读写⽬录查找，例如 redhat的⼤马还有提权难易程度检测功能。</p>
<h4 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a><strong>Webshell</strong></h4><p>指的是已经在某个web植⼊脚本⽊马，且该⽊马能被解析成脚本⽂件，并能被访问到，能通过这个 ⽂件控制web。 </p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h4><p>专业⼀点就称为“统⼀资源定位符”。像我业余的，就把他理解成链接。更有专业的对⽐：⽹址和URL之间 的区别 </p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a><strong>提权</strong></h4><p>也称权限提升，顾名思义，就是把我们⾃⼰的权限提起升⾼，提权都需要利⽤到漏洞。 </p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a><strong>POC</strong></h4><p>全称proof of concept，译作“概念验证”，它可以是⼀段代码也可以是⼀个程序，⽤作验证某个漏洞是 存在的，没有破坏能⼒。 </p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a><strong>EXP</strong></h4><p>全称exploit，指的是漏洞利⽤程序，这种程序可以是任何语⾔编写的，具有破坏能⼒。 </p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h4><p>译作”有效载荷“，当exploit利⽤成功后将执⾏payload。</p>
<h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a><strong>shellcode</strong></h4><p>漏洞利⽤的过程，就是把shellcode发送到⽬标服务器，其中shellcode包含payload，如果shellcode 被成功执⾏，那么才会执⾏有效载荷payload，这个载荷可以是⼀条os命令，可以是⼀段⼆进制代码。 </p>
<h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a><strong>CMS</strong></h4><p>内容管理系统，简单来说就是⼀种⽹站系统模板，很多⽹站都是⽤同⼀种模板改的。 </p>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a><strong>反序列化</strong></h4><p>只将字节序列转换成⽬标对象的过程。</p>
<h4 id="Fuzz测试"><a href="#Fuzz测试" class="headerlink" title="Fuzz测试"></a><strong>Fuzz测试</strong></h4><p>是⼀种安全测试⽅法，他介于完全的⼿⼯测试和完全的⾃动化测试之间。模糊测试（fuzz testing）是一种安全测试方法，他介于完全的手工测试和完全的自动化测试之间。（<a href="https://www.cnblogs.com/forwill/p/5756634.html%EF%BC%89">https://www.cnblogs.com/forwill/p/5756634.html）</a></p>
]]></content>
      <categories>
        <category>渗透测试相关术语</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
