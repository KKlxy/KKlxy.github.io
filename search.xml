<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++</title>
    <url>/2018/10/05/C++/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><span id="more"></span>
<h2 id="1简介"><a href="#1简介" class="headerlink" title="1简介"></a>1简介</h2><h3 id="1-1-C"><a href="#1-1-C" class="headerlink" title="1.1 C++"></a>1.1 C++</h3><p>C语言代表的过程性语言，C++在C语言的基础上添加的类代表的面向对象语言、C++模板支持的泛型编程。</p>
<h3 id="1-2-C"><a href="#1-2-C" class="headerlink" title="1.2 C"></a>1.2 C</h3><p>汇编语言依赖于计算机的内部机器语言，是低级语言，直接操作硬件；UNIX是高级语言致力于解决问题，不针对特定的硬件，</p>
<p>为了将低级语言的效率、硬件访问能力和高级语言的通用性、可移植性融合在一起，于是在旧语言的基础上开发了C语言</p>
<p>数据是程序使用和处理的信息；算法是程序使用的方法</p>
<p>C强调的是编程的算法方面</p>
<p>C++：OOP(面向对象编程)强调的是数据；C++中类是一种规范，描述了新型数据格式，对象还是根据这种规范构造的特定数据结构，包括数据部分和操作部分，根据类定义可以创建一个对象，该对象保存了描述类的所有数据值，可使用类方法来修改对象。</p>
<p>OOP编程不仅仅是将数据和方法合并为类定义。信息隐藏还可以保护数据，使其免遭不恰当地访问。多态让您为运算符和函数创造多个定义，通过编程上下文来确定使用哪个定义。继承让您能使用旧类派生出新类。</p>
<p>C++是C的超集，C++的二重性及提供了高级抽象，又可以底层访问 </p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><h3 id="3-1-简单变量"><a href="#3-1-简单变量" class="headerlink" title="3.1 简单变量"></a>3.1 简单变量</h3><p>面向对象编程（OOP）的本质是设计并扩展自己的数据类型。</p>
<p>sizeof只是一个运算符，不是函数</p>
<p>sizeof(int类型名)     size of 变量名</p>
<p>int n = 3; int n(3); int n{3}</p>
<p>cout默认以十进制形式输出</p>
<p>cout &lt;&lt; hex 十六进制</p>
<p>cout &lt;&lt; oct 八进制 </p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><p>浮点数在内存中如何存储？</p>
<p>float 8.25 单精度 32bit</p>
<p>double 64bit</p>
<p>浮点数二进制的科学计数法  8.25 = 8.25*10^0</p>
<p>1000.01   = 1.00001*2^3</p>
<p> 0.25*2=0.5    </p>
<p>0.5*2=1</p>
<p>二进制至少32位，十进制至少小数点后6位</p>
<h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>cout.setf(ios_base::fixed, ios_base::floatfield);</p>
<p>因为float的精度不够，float类型有效位有限</p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><p>C++语言没有提供自动防止超出整数类型范围的功能，需要程序员自己预估数据大小并选择合适的数据类型，每种数据类型的宽度，C++并没有做规定， 具体的值有开发平台和编译器决定。</p>
<p>默认C++整数常量在不超出int类型范围的应用情况下，默认优先使用int类型</p>
<p>不同的平台和编译器对应的long 和long long 类型的大小是不同的，如果long长度位4字节，则存放在double类型中不会出现舍入误差，如果long long类型位8字节，则存放在double类型中会出现舍入误差。</p>
<h2 id="4-复合类型"><a href="#4-复合类型" class="headerlink" title="4 复合类型"></a>4 复合类型</h2>]]></content>
      <categories>
        <category>C&amp;C++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32</title>
    <url>/2019/01/05/STM32/</url>
    <content><![CDATA[<h1 id="STM32"><a href="#STM32" class="headerlink" title="STM32"></a>STM32</h1><h1 id="一、Keil创建工程"><a href="#一、Keil创建工程" class="headerlink" title="一、Keil创建工程"></a>一、Keil创建工程</h1><h2 id="1-安装-Keil-uVision4"><a href="#1-安装-Keil-uVision4" class="headerlink" title="1. 安装 Keil uVision4"></a>1. 安装 Keil uVision4</h2><h2 id="2-新建工程"><a href="#2-新建工程" class="headerlink" title="2. 新建工程"></a>2. 新建工程</h2><h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><h3 id><a href="#" class="headerlink" title></a><img src="/2019/01/05/STM32/image-20220115073734659.png" alt="image-20220115073734659" style="zoom:50%;"><img src="/2019/01/05/STM32/image-20220115074130502.png" alt="image-20220115074130502" style="zoom:50%;"></h3><h3 id="（2）选择处理器-具体情况具体分析"><a href="#（2）选择处理器-具体情况具体分析" class="headerlink" title="（2）选择处理器(具体情况具体分析)"></a>（2）选择处理器(具体情况具体分析)</h3><p>STMicroelectronics-&gt;STM32F103C8</p>
<img src="/2019/01/05/STM32/image-20220115074927065.png" alt="image-20220115074927065" style="zoom: 50%;">

<h3 id="3-选择否，不用软件自动添加，选择手动添加"><a href="#3-选择否，不用软件自动添加，选择手动添加" class="headerlink" title="(3)选择否，不用软件自动添加，选择手动添加"></a>(3)选择否，不用软件自动添加，选择手动添加</h3><img src="/2019/01/05/STM32/image-20220115075725120.png" alt="image-20220115075725120" style="zoom: 50%;">

<h2 id="3-工程分组"><a href="#3-工程分组" class="headerlink" title="3.工程分组"></a>3.工程分组</h2><img src="/2019/01/05/STM32/image-20220115080042674.png" alt="image-20220115080042674" style="zoom:50%;">

<h2 id="4-导入Lib库，放到当前工程中"><a href="#4-导入Lib库，放到当前工程中" class="headerlink" title="4.导入Lib库，放到当前工程中"></a>4.导入Lib库，放到当前工程中</h2><h3 id="（1）导入启动代码文件"><a href="#（1）导入启动代码文件" class="headerlink" title="（1）导入启动代码文件"></a>（1）导入启动代码文件</h3><img src="/2019/01/05/STM32/image-20220115081159314.png" alt="image-20220115081159314" style="zoom:50%;">

<h3 id="（2）导入init文件"><a href="#（2）导入init文件" class="headerlink" title="（2）导入init文件"></a>（2）导入init文件</h3><img src="/2019/01/05/STM32/image-20220115081613761.png" alt="image-20220115081613761" style="zoom:50%;">

<h3 id="（3）添加main-c"><a href="#（3）添加main-c" class="headerlink" title="（3）添加main.c"></a>（3）添加main.c</h3><img src="/2019/01/05/STM32/image-20220115083431644.png" alt="image-20220115083431644" style="zoom:50%;">

<h2 id="5-配置标准外设"><a href="#5-配置标准外设" class="headerlink" title="5.配置标准外设"></a>5.配置标准外设</h2><img src="/2019/01/05/STM32/image-20220115090004613.png" alt="image-20220115090004613" style="zoom: 50%;">

<h2 id="6-导入头文件"><a href="#6-导入头文件" class="headerlink" title="6.导入头文件"></a>6.导入头文件</h2><img src="/2019/01/05/STM32/image-20220115084527834.png" alt="image-20220115084527834" style="zoom:50%;">

<h2 id="7-ST-Link"><a href="#7-ST-Link" class="headerlink" title="7.ST-Link"></a>7.ST-Link</h2><img src="/2019/01/05/STM32/image-20220115084713574.png" alt="image-20220115084713574" style="zoom:50%;">

<img src="/2019/01/05/STM32/image-20220115085208993.png" alt="image-20220115085208993" style="zoom:50%;">

<h1 id="二、STM32"><a href="#二、STM32" class="headerlink" title="二、STM32"></a>二、STM32</h1><h2 id="（一）初识LED原理图"><a href="#（一）初识LED原理图" class="headerlink" title="（一）初识LED原理图"></a>（一）初识LED原理图</h2><h3 id="1-跳线"><a href="#1-跳线" class="headerlink" title="1.跳线"></a>1.跳线</h3><img src="/2019/01/05/STM32/image-20220115091528536.png" alt="image-20220115091528536" style="zoom:50%;">

<h3 id="2-发光二极管"><a href="#2-发光二极管" class="headerlink" title="2.发光二极管"></a>2.发光二极管</h3><p>吓死人的是电压，电死人的是电流。</p>
<p>高电平点亮=&gt;共阴极=&gt;高电平电压3.3V,二极管两端的电压差超过0.7V就会产生电流（PA输出高电平，接地0）</p>
<p>低电平点亮=&gt;共阳极（PA低，高）</p>
<h3 id="3-限流电阻"><a href="#3-限流电阻" class="headerlink" title="3.限流电阻"></a>3.限流电阻</h3><p>I=V/R   （R≈0，I-&gt;∞）电流越大，越亮，寿命越短</p>
<h2 id="（二）分析GPIO口寄存器"><a href="#（二）分析GPIO口寄存器" class="headerlink" title="（二）分析GPIO口寄存器"></a>（二）分析GPIO口寄存器</h2><p><strong>地址=基地址+偏移地址</strong></p>
<img src="/2019/01/05/STM32/image-20220115100554672.png" alt="image-20220115100554672" style="zoom:50%;">

<p><img src="/2019/01/05/STM32/image-20210904223621918.png" alt="image-20210904223621918"> </p>
<p>PA1-4: 19:4</p>
<p>00：通用推挽输出模式</p>
<p><img src="/2019/01/05/STM32/image-20220115101833675.png" alt="image-20220115101833675"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)<span class="number">0x40010800</span> &amp;= <span class="number">0xFFF0000F</span>;<span class="comment">//GPIOA_CRL = 0x40010800 + 0x00 ,清除[19:4]</span></span><br><span class="line">	*(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)<span class="number">0x40010800</span> |= <span class="number">0x00033330</span>;<span class="comment">//[19:4] = 0011 0011 0011 011 将PA1~PA4配置为通用推挽输出，工作频率50MHz</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）第一次控制LED灯的代码"><a href="#（三）第一次控制LED灯的代码" class="headerlink" title="（三）第一次控制LED灯的代码"></a>（三）第一次控制LED灯的代码</h2><h3 id="RCC寄存器"><a href="#RCC寄存器" class="headerlink" title="RCC寄存器"></a>RCC寄存器</h3><p>APB1、APB2、AHB为CPU内部的总线：CPU通过地址找外设，而外设挂载到地址上，CPU通过总线来管理地址；</p>
<p>HB(Higher Bus):高速总线    PB（Peripheral Bus）：普通外设总线（PB1 PB2）   <img src="/2019/01/05/STM32/image-20210906173242102.png" alt="image-20210906173242102"></p>
<p>将RCC_APB2ENR寄存器第二位置1</p>
<p><img src="/2019/01/05/STM32/image-20210906173648932.png" alt="image-20210906173648932"></p>
<p><img src="/2019/01/05/STM32/Users\s\AppData\Roaming\Typora\typora-user-images\image-20210906173720845.png" alt="image-20210906173720845"></p>
<p>起初由define定义至用结构体头文件来简化代码</p>
<p>库函数 </p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCCAPB2ENR 	(*(volatile unsigned long *)0x40021018)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOACRL		(*(volatile unsigned long *)0x40010800)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOAODR		(*(volatile unsigned long *)0x4001080C)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//RCC_APB2ENR= 0x40021000 + 0x18 = 0x40021018</span></span><br><span class="line">	<span class="comment">//RCC_APB2ENR bit[2] = 1 使能GPIOA外设时钟</span></span><br><span class="line">	<span class="comment">//*(unsigned long *)0x40021018 |= (1&lt;&lt;2); </span></span><br><span class="line">	RCCAPB2ENR |= (<span class="number">1</span>&lt;&lt;<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//*(unsigned long *)0x40010800 &amp;= 0xFFF0000F;//GPIOA_CRL = 0x40010800 + 0x00 ,清除[19:4]</span></span><br><span class="line">	GPIOACRL &amp;= <span class="number">0xFFF0000F</span>;</span><br><span class="line">	<span class="comment">//*(unsigned long *)0x40010800 |= 0x00033330;//[19:4] = 0011 0011 0011 011 将PA1~PA4配置为通用推完输出，工作频率50MHz</span></span><br><span class="line">	GPIOACRL |= <span class="number">0x00033330</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//GPIO_ODR = 0x40010800 + 0x0C = 0x4001080C</span></span><br><span class="line">	<span class="comment">//*(unsigned long *)0x4001080C &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));  //PA1~PA4输出低电平，LED全灭</span></span><br><span class="line">	GPIOAODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>)); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//点亮LED1~LED4  PA1~PA4输出高电平</span></span><br><span class="line">		<span class="comment">//*(unsigned long *)0x4001080C |= (1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4);</span></span><br><span class="line">		GPIOAODR |= (<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">		<span class="comment">//熄灭LED1~LED4  PA1~PA4输出低电平</span></span><br><span class="line">		<span class="comment">//*(unsigned long *)0x4001080C &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));  //PA1~PA4输出低电平，LED全灭</span></span><br><span class="line">		GPIOAODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>));</span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（四）使用结构体访问外设寄存器"><a href="#（四）使用结构体访问外设寄存器" class="headerlink" title="（四）使用结构体访问外设寄存器"></a>（四）使用结构体访问外设寄存器</h2><p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 </span><br><span class="line">	RCC-&gt;APB2ENR |= (<span class="number">1</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//RCCAPB2ENR |= (1&lt;&lt;2);	</span></span><br><span class="line">	</span><br><span class="line">	GPIOA-&gt;CRL &amp;= <span class="number">0xFFF0000F</span>;<span class="comment">//GPIOACRL &amp;= 0xFFF0000F;</span></span><br><span class="line">	GPIOA-&gt;CRL |= <span class="number">0x00033330</span>;<span class="comment">//GPIOACRL |= 0x00033330;</span></span><br><span class="line">	</span><br><span class="line">	GPIOA-&gt;ODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>)); <span class="comment">//GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4)); </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//点亮LED1~LED4  PA1~PA4输出高电平</span></span><br><span class="line">		GPIOA-&gt;ODR |= (<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);<span class="comment">//GPIOAODR |= (1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4);</span></span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">		<span class="comment">//熄灭LED1~LED4  PA1~PA4输出低电平</span></span><br><span class="line">		GPIOA-&gt;ODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>));<span class="comment">//GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));</span></span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>main.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CFGR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CIR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB2RSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB1RSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> AHBENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB2ENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB1ENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BDCR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CSR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> AHBRSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CFGR2;	</span><br><span class="line">&#125;RCC_Typedef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CRL;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CRH;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> IDR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> ODR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BSRR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BRR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> LCKR;</span><br><span class="line">&#125;GPIOA_Typedef;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCC  ((RCC_Typedef *)0x40021000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOA  ((GPIOA_Typedef *)0x40010800)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（五）第一次使用STM32标准库资源"><a href="#（五）第一次使用STM32标准库资源" class="headerlink" title="（五）第一次使用STM32标准库资源"></a>（五）第一次使用STM32标准库资源</h2><p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 </span><br><span class="line">	RCC-&gt;APB2ENR |= (<span class="number">1</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//RCCAPB2ENR |= (1&lt;&lt;2);	</span></span><br><span class="line">	</span><br><span class="line">	GPIOA-&gt;CRL &amp;= <span class="number">0xFFF0000F</span>;<span class="comment">//GPIOACRL &amp;= 0xFFF0000F;</span></span><br><span class="line">	GPIOA-&gt;CRL |= <span class="number">0x00033330</span>;<span class="comment">//GPIOACRL |= 0x00033330;</span></span><br><span class="line">	</span><br><span class="line">	GPIOA-&gt;ODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>)); <span class="comment">//GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4)); </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//点亮LED1~LED4  PA1~PA4输出高电平</span></span><br><span class="line">		GPIOA-&gt;ODR |= (<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);<span class="comment">//GPIOAODR |= (1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4);</span></span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">		<span class="comment">//熄灭LED1~LED4  PA1~PA4输出低电平</span></span><br><span class="line">		GPIOA-&gt;ODR &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">3</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">4</span>));<span class="comment">//GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));</span></span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>main.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCC  									((RCC_Typedef *)0x40021000)</span></span><br><span class="line"><span class="comment">//#define RCC                 ((RCC_TypeDef *) RCC_BASE)</span></span><br><span class="line"><span class="comment">//RCC_BASE = AHBPERIPH_BASE + 0x1000 = PERIPH_BASE + 0x20000 + 0x1000 = 0x40000000+ 0x20000 + 0x1000 = 0x40021000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOA  								((GPIOA_Typedef *)0x40010800)</span></span><br><span class="line"><span class="comment">//#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)</span></span><br></pre></td></tr></table></figure>



<h2 id="（六）使用STM32标准库函数"><a href="#（六）使用STM32标准库函数" class="headerlink" title="（六）使用STM32标准库函数"></a>（六）使用STM32标准库函数</h2><p>添加core_cm3.c和stm32f10x_it.c文件以及src全部.c 文件</p>
<img src="/2019/01/05/STM32/image-20220115160521683.png" alt="image-20220115160521683" style="zoom:50%;">

<p><img src="/2019/01/05/STM32/image-20220115160851899.png" alt="image-20220115160851899"></p>
<p><img src="/2019/01/05/STM32/image-20220115160909747.png" alt="image-20220115160909747"></p>
<p><img src="/2019/01/05/STM32/image-20220115161242093.png" alt="image-20220115161242093"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 </span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//RCC-&gt;APB2ENR |= (1&lt;&lt;2);//RCCAPB2ENR |= (1&lt;&lt;2);	</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//GPIOA-&gt;CRL &amp;= 0xFFF0000F;//GPIOACRL &amp;= 0xFFF0000F;</span></span><br><span class="line">	<span class="comment">//GPIOA-&gt;CRL |= 0x00033330;//GPIOACRL |= 0x00033330;	</span></span><br><span class="line">	<span class="comment">//GPIOA-&gt;ODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4)); //GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4)); </span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4; <span class="comment">//管脚</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;   <span class="comment">//速率</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;    <span class="comment">//通用推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);    <span class="comment">//初始化</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//点亮LED1~LED4  PA1~PA4输出为高电平</span></span><br><span class="line">		<span class="comment">//GPIOA-&gt;ODR |= (1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4);//GPIOAODR |= (1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4);</span></span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4, Bit_SET);</span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">		<span class="comment">//熄灭LED1~LED4  PA1~PA4输出低电平</span></span><br><span class="line">		<span class="comment">//GPIOA-&gt;ODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));//GPIOAODR &amp;= ~((1&lt;&lt;1)|(1&lt;&lt;2)|(1&lt;&lt;3)|(1&lt;&lt;4));</span></span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4, Bit_RESET);</span><br><span class="line">		Delay(<span class="number">0xffff</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="（七）按键KEY"><a href="#（七）按键KEY" class="headerlink" title="（七）按键KEY"></a>（七）按键KEY</h2><p><img src="/2019/01/05/STM32/image-20210910210946671.png" alt="image-20210910210946671"></p>
<p><img src="/2019/01/05/STM32/image-20210910211002864.png" alt="image-20210910211002864">浮空输入</p>
<p>​        此时PA0是输入电压，当输入为低电平，代表按键按下。</p>
<p>​        <strong>硬件消抖</strong>：0.1μF电容会将高电平变为低电平的抖动去除。</p>
<p>​        按键按下，PA0测试为低电平，PA1-4输出低电平，灯灭发生转换</p>
<p>​        因为浮空输入PA0无法检测输入高低电压，STM32可以通过编程在内部配置内部上拉功能，当输入为高电平经过上拉电阻，当按键按下，输入为低电平则跳过上拉电阻。</p>
<p><img src="/2019/01/05/STM32/image-20220115163453707.png" alt="image-20220115163453707"></p>
<p>#include “Led_Key.h”</p>
<p>int main(void)<br>{<br>    Led_Configuration();<br>    Key_Configuration();<br>    <strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	Key_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Key_Scan(GPIOA, GPIO_Pin_0) == KEY_ON)</span><br><span class="line">			GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4; <span class="comment">//ODR寄存器  异或：相同为0，不同为1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Led_key.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Led_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PA0--KEY1  input</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Key_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//修改的地方</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Key_Scan</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">unsigned</span> <span class="keyword">int</span> Pin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Delay(<span class="number">1000</span>);    <span class="comment">//延迟</span></span><br><span class="line">		<span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == <span class="number">0</span>)  <span class="comment">//按键被按下去</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == <span class="number">0</span>);<span class="comment">//只要手不离开就一直循环下去直至离开</span></span><br><span class="line">			<span class="keyword">return</span> KEY_ON;<span class="comment">//按键按下去一次</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> KEY_OFF;  <span class="comment">//抖动</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> KEY_OFF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Led_key.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_KEY_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_KEY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_ON 	0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_OFF	1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Led_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Key_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Key_Scan</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">unsigned</span> <span class="keyword">int</span> Pin)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="（八）呼吸灯"><a href="#（八）呼吸灯" class="headerlink" title="（八）呼吸灯"></a>（八）呼吸灯</h2><p>I=U/R,当I逐渐变大，灯逐渐变亮，方式：</p>
<p>1、单位时间内高电平的时间逐渐变长，低电平的时间逐渐变短，灯逐渐变亮，相反，灯逐渐变暗</p>
<p>2、PWM</p>
<p><img src="/2019/01/05/STM32/image-20220115165950358.png" alt="image-20220115165950358"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4000</span>; i++)  <span class="comment">//LED逐渐变亮</span></span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4);</span><br><span class="line">			Delay(<span class="number">4000</span> - i);</span><br><span class="line">			GPIO_SetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4);</span><br><span class="line">			Delay(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4000</span>; i++) <span class="comment">//LED逐渐变暗</span></span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4);</span><br><span class="line">			Delay(i);</span><br><span class="line">			GPIO_SetBits(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4);</span><br><span class="line">			Delay(<span class="number">4000</span> - i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="（九）中断"><a href="#（九）中断" class="headerlink" title="（九）中断"></a>（九）中断</h2><p>异常包括中断，异常不一定是中断。</p>
<p>当出现某一种异常，CPU会自动跳转到某一个地址（无法更改）</p>
<p><strong>异常向量表</strong></p>
<p><img src="/2019/01/05/STM32/image-20211011152832711.png" alt="image-20211011152832711"></p>
<p>灰色（-3~6）的是系统异常，arm公司</p>
<p>白色的是CPU异常，外设相关的中断异常</p>
<p>stm32f10x_it.c：中断返回函数</p>
<p>**NVIC: **   向量中断控制器，简称 NVIC，是 Cortex‐M3 不可分离的一部分，它与 CM3 内核的逻辑紧密耦合</p>
<p><img src="/2019/01/05/STM32/image-20220115230154365.png" alt="image-20220115230154365"></p>
<p><img src="/2019/01/05/STM32/image-20220115232742348.png" alt="image-20220115232742348"></p>
<p><strong>配置PA0外部中断的功能</strong></p>
<p>找到库函数中对应的当前中断代码的外部通道0</p>
 <img src="/2019/01/05/STM32/image-20220115225106099.png" alt="image-20220115225106099" style="zoom:50%;">

<p><img src="/2019/01/05/STM32/image-20220115230237614.png" alt="image-20220115230237614"></p>
<p><img src="/2019/01/05/STM32/image-20220115230546086.png" alt="image-20220115230546086"></p>
<p><img src="/2019/01/05/STM32/image-20220115230910524.png" alt="image-20220115230910524"></p>
<p>中断请求：当产生中断时立即去处理</p>
<p>事件请求：当产生中断后处理完当前任务后再处理中断</p>
<p><img src="/2019/01/05/STM32/image-20220116152538711.png" alt="image-20220116152538711"></p>
<p>中断正常初始化后，会跳转到EXTI0_IRQHandler处理函数 中断服务程序,产生中断会自动置位，但需手动清除</p>
<p><img src="/2019/01/05/STM32/image-20220116153120068.png" alt="image-20220116153120068"></p>
<p>处理完中断后，手动清除中断标志位，保证下次中断正常产生</p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	PA0_EXTI0_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>mai.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CFGR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CIR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB2RSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB1RSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> AHBENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB2ENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> APB1ENR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BDCR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CSR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> AHBRSTR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CFGR2;	</span><br><span class="line">&#125;RCC_Typedef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CRL;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> CRH;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> IDR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> ODR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BSRR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> BRR;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> LCKR;</span><br><span class="line">&#125;GPIOA_Typedef;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RCC  ((RCC_Typedef *)0x40021000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOA  ((GPIOA_Typedef *)0x40010800)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_exit.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA0_EXTI0_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);  <span class="comment">//RCC_APB2Periph_AFIO功能复用时钟</span></span><br><span class="line"></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	   <span class="comment">//优先级组</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;   <span class="comment">//通道PA0对应外部通道0</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;   <span class="comment">//响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;   <span class="comment">//开启NVIC外设管理</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//修改的地方</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);</span><br><span class="line">	</span><br><span class="line">	EXTI_InitStructure.EXTI_Line = EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;      <span class="comment">//设置EXIT线路为中断请求</span></span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  <span class="comment">//设置输入线路下降沿为中断请求</span></span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd = ENABLE;   <span class="comment">//使能中断请求</span></span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI0_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>    <span class="comment">//中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0) != RESET)    <span class="comment">//当有按键按下时即外部中断产生了=SET</span></span><br><span class="line">	&#123;</span><br><span class="line">		GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;   <span class="comment">//取反</span></span><br><span class="line"><span class="comment">//		wait(5000000);</span></span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line0);  <span class="comment">//手动清除中断标志位</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_exti.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_EXTI_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_EXTI_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA0_EXTI0_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十）SysTick定时器"><a href="#（十）SysTick定时器" class="headerlink" title="（十）SysTick定时器"></a>（十）SysTick定时器</h2><p>SysTick定时器被捆绑在NVIC中，用于产生SYSTICK异常（异常号：15）。在以前，大多操<br>作系统需要一个硬件定时器来产生操作系统需要的滴答中断，作为整个系统的时基。</p>
<p>The processor has a 24-bit system timer, SysTick, that counts down from the reload value to<br>zero, reloads (wraps to) the value in the LOAD register on the next clock edge, then counts<br>down on subsequent clocks.</p>
<p><img src="/2019/01/05/STM32/image-20220116162854390.png" alt="image-20220116162854390"></p>
<p>1/72000000*72=1微秒   从72递减1微秒产生一次中断</p>
<p><img src="/2019/01/05/STM32/image-20220116172135464.png" alt="image-20220116172135464"></p>
<p><img src="/2019/01/05/STM32/image-20220116172303113.png" alt="image-20220116172303113"></p>
<p><img src="/2019/01/05/STM32/image-20220116172331314.png" alt="image-20220116172331314"></p>
<p><img src="/2019/01/05/STM32/image-20220116172405803.png" alt="image-20220116172405803"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4, Bit_SET);</span><br><span class="line">		Delay_us(<span class="number">100000</span>);</span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4, Bit_RESET);</span><br><span class="line">		Delay_us(<span class="number">100000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_SysTick.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> TimingDelay;   <span class="comment">//创建一个全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(SysTick_Config(<span class="number">72</span>));</span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);   <span class="comment">//暂时初始化后先关闭定时器，使用前开启</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_us</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span>    <span class="comment">//n值递减，1us减1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TimingDelay = n;</span><br><span class="line">	SysTick-&gt;CTRL |= (<span class="number">1</span>&lt;&lt;<span class="number">0</span>);   <span class="comment">//开启Sys_Tick</span></span><br><span class="line">	<span class="keyword">while</span>(TimingDelay);</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_SysTick.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_SYSTICK_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_SYSTICK_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> TimingDelay;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_us</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在stm32f10x_it.c文件中添加</p>
<img src="/2019/01/05/STM32/image-20220116174927828.png" alt="image-20220116174927828" style="zoom: 67%;">

<img src="/2019/01/05/STM32/image-20220116174858486.png" alt="image-20220116174858486" style="zoom:50%;">

<h2 id="（十一）独立看门狗"><a href="#（十一）独立看门狗" class="headerlink" title="（十一）独立看门狗"></a>（十一）独立看门狗</h2><p>看门狗：帮助人们在设备没有人为复位的情况下，当他出现死机是可以让芯片自动复位，正常工作时周期性喂狗即可。</p>
<p>独立看门狗不依赖其他硬件</p>
<p><img src="/2019/01/05/STM32/Users\s\AppData\Roaming\Typora\typora-user-images\image-20220129162939327.png" alt="image-20220129162939327"></p>
<p>LSI（30-60kHz）</p>
<p><img src="/2019/01/05/STM32/image-20220129163224977.png" alt="image-20220129163224977"></p>
<p><img src="/2019/01/05/STM32/image-20220129164305879.png" alt="image-20220129164305879"></p>
<p>独立看门狗的复位时间：IWDG_RLR*减一个数需要的时间频率</p>
<p>设置IWDG_RLR=625，PR=4则约1s独立看门狗进行一次复位，对应预分频因子为64</p>
<p><img src="/2019/01/05/STM32/image-20220129165553710.png" alt="image-20220129165553710"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	Key_Configuration();</span><br><span class="line">    </span><br><span class="line">	IWDG_Configuration();</span><br><span class="line">	</span><br><span class="line">  <span class="comment">//写一段灯闪烁的代码</span></span><br><span class="line">	LED_TOGGLE;</span><br><span class="line">	Delay_us(<span class="number">100000</span>);</span><br><span class="line">	LED_TOGGLE;</span><br><span class="line">	Delay_us(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">if</span>(Key_Scan(GPIOA, GPIO_Pin_0) == KEY_ON)</span><br><span class="line">			IWDG_FeedDog();<span class="comment">//喂狗</span></span><br><span class="line">		Delay_us(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_iwdg.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使能IWDG，在40kHz LSI条件下，约等于每隔1s产生IWDG复位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);</span><br><span class="line">	IWDG_SetPrescaler(IWDG_Prescaler_64);</span><br><span class="line">	IWDG_SetReload(<span class="number">625</span>);</span><br><span class="line">	IWDG_ReloadCounter();</span><br><span class="line">	IWDG_Enable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_FeedDog</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	IWDG_ReloadCounter();  <span class="comment">//喂狗</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_iwdg.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_IWDG_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_IWDG_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_FeedDog</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Led_Key.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_KEY_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_KEY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_ON 	0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_OFF	1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_TOGGLE  GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Led_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Key_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Key_Scan</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">unsigned</span> <span class="keyword">int</span> Pin)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>灯一直闪烁说明看门狗一直在复位，如果频繁按下按键，会发生喂狗操作，灯熄灭</p>
<h2 id="（十二）窗口看门狗"><a href="#（十二）窗口看门狗" class="headerlink" title="（十二）窗口看门狗"></a>（十二）窗口看门狗</h2><p><img src="/2019/01/05/STM32/Users\s\AppData\Roaming\Typora\typora-user-images\image-20220129174831076.png" alt="image-20220129174831076"></p>
<img src="/2019/01/05/STM32/image-20220129192314688.png" alt="image-20220129192314688" style="zoom:50%;">

<p>1.当窗口看门狗的递减计数器T[6:0]大于上线窗口W[6:0]时，如果此时尝试去喂狗的话，将立刻产生CPU复位。</p>
<p>2.当递减计数器T[6:0]到达下线窗口0x3F的值时，会立刻触发CPU复位</p>
<img src="/2019/01/05/STM32/image-20220129192407856.png" alt="image-20220129192407856" style="zoom:50%;">

<p><img src="/2019/01/05/STM32/image-20220129192848113.png" alt="image-20220129192848113"></p>
<p><img src="/2019/01/05/STM32/image-20220129210851645.png" alt="image-20220129210851645"></p>
<p><img src="/2019/01/05/STM32/image-20220129211320446.png" alt="image-20220129211320446"></p>
<p><img src="/2019/01/05/STM32/image-20220129211500046.png" alt="image-20220129211500046"></p>
<p><img src="/2019/01/05/STM32/image-20220129211729009.png" alt="image-20220129211729009"></p>
<p><img src="/2019/01/05/STM32/image-20220201163903932.png" alt="image-20220201163903932"></p>
<p><img src="/2019/01/05/STM32/image-20220201163958011.png" alt="image-20220201163958011"></p>
<p><img src="/2019/01/05/STM32/image-20220201164126712.png" alt="image-20220201164126712"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">  <span class="comment">//写一段灯闪烁的代码</span></span><br><span class="line">	LED_TOGGLE;</span><br><span class="line">	Delay_us(<span class="number">100000</span>);</span><br><span class="line">	LED_TOGGLE;</span><br><span class="line">	Delay_us(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">	WWDG_Configuration(<span class="number">0x7F</span>, <span class="number">0x5F</span>, WWDG_Prescaler_8);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_wwdg.c</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;bsp_wwdg.h&quot;</span><br><span class="line"></span><br><span class="line">unsigned char WWDG_CNT = 0x7F;</span><br><span class="line"></span><br><span class="line">void WWDG_NVIC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = WWDG_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void WWDG_Configuration(unsigned char tr, unsigned char wr, unsigned int pr)</span><br><span class="line">&#123;</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);</span><br><span class="line">	</span><br><span class="line">	WWDG_CNT = tr &amp; WWDG_CNT;</span><br><span class="line">	WWDG_SetPrescaler(pr);</span><br><span class="line">	WWDG_SetWindowValue(wr);</span><br><span class="line">	WWDG_Enable(WWDG_CNT);</span><br><span class="line"></span><br><span class="line">	WWDG_NVIC_Init();</span><br><span class="line">	WWDG_ClearFlag();</span><br><span class="line">	WWDG_EnableIT();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_wwdg.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_WWDG_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_WWDG_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> WWDG_CNT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WWDG_Configuration</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> tr, <span class="keyword">unsigned</span> <span class="keyword">char</span> wr, <span class="keyword">unsigned</span> <span class="keyword">int</span> pr)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补：<strong>stm32f10x_it.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WWDG_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	WWDG_SetCounter(WWDG_CNT);</span><br><span class="line">	WWDG_ClearFlag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十三）USART初始化及单个字符发送代码"><a href="#（十三）USART初始化及单个字符发送代码" class="headerlink" title="（十三）USART初始化及单个字符发送代码"></a>（十三）USART初始化及单个字符发送代码</h2><p>UART应用：cpu和cpu之间，开发板和pc机之间，开发板和外围模块之间</p>
<p><img src="/2019/01/05/STM32/image-20220207210432924.png" alt="image-20220207210432924"></p>
<p><img src="/2019/01/05/STM32/image-20220207210512490.png" alt="image-20220207210512490"></p>
<p><img src="/2019/01/05/STM32/image-20220207210837834.png" alt="image-20220207210837834"></p>
<p><img src="/2019/01/05/STM32/image-20220207211035634.png" alt="image-20220207211035634"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Uart1_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		USART_SendData(USART1, <span class="number">0x41</span>);</span><br><span class="line">		Delay_us(<span class="number">1000000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">115200</span>;</span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;</span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;</span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line">	USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_UART_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_UART_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2019/01/05/STM32/image-20220209111229426.png" alt="image-20220209111229426" style="zoom:50%;">

<h2 id="（十四）UART字符串发送和printf实现"><a href="#（十四）UART字符串发送和printf实现" class="headerlink" title="（十四）UART字符串发送和printf实现"></a>（十四）UART字符串发送和printf实现</h2><p><img src="/2019/01/05/STM32/image-20220209111609348.png" alt="image-20220209111609348"></p>
<p><img src="/2019/01/05/STM32/image-20220209111722385.png" alt="image-20220209111722385"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Uart1_Configuration();</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i++);</span><br><span class="line">		Delay_us(<span class="number">1000000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">115200</span>;</span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;</span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;</span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line">	USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(*pt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) != SET);<span class="comment">//确保发送缓冲区为空，只有发送缓冲区为空才继续发送</span></span><br><span class="line">        <span class="comment">//Delay_us(1000000);//加上延时，否则速度过快，数据缓冲区来不及处理</span></span><br><span class="line">		USART_SendData(USART1, *pt);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);<span class="comment">//等待发送完成</span></span><br><span class="line">        <span class="comment">//Delay_us(1000000);</span></span><br><span class="line">		pt++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span> <span class="params">(<span class="keyword">int</span> c, FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) != SET);<span class="comment">//确保发送缓冲区为空，只有发送缓冲区为空才继续发送</span></span><br><span class="line">	USART_SendData(USART1, c);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);<span class="comment">//等待发送完成</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_UART_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_UART_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2019/01/05/STM32/image-20220209120255539.png" alt="image-20220209120255539" style="zoom:50%;">

<h2 id="（十五）UART接收功能实现"><a href="#（十五）UART接收功能实现" class="headerlink" title="（十五）UART接收功能实现"></a>（十五）UART接收功能实现</h2><p><img src="/2019/01/05/STM32/image-20220209120631587.png" alt="image-20220209120631587"></p>
<p> <img src="/2019/01/05/STM32/image-20220209123951976.png" alt="image-20220209123951976"></p>
<p><img src="/2019/01/05/STM32/image-20220209124115869.png" alt="image-20220209124115869"></p>
<p><img src="/2019/01/05/STM32/image-20220209125912670.png" alt="image-20220209125912670"></p>
<img src="/2019/01/05/STM32/image-20220209133111180.png" alt="image-20220209133111180" style="zoom:50%;">

<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Uart1_Configuration();</span><br><span class="line">	Uart1_NVIC_Init();</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;   <span class="comment">//TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	USART_InitStructure.USART_BaudRate = <span class="number">115200</span>;</span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;</span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;</span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class="line">	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);</span><br><span class="line">	USART_Cmd(USART1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_NVIC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(*pt)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) != SET);<span class="comment">//确保发送缓冲区为空，只有发送缓冲区为空才继续发送</span></span><br><span class="line">		USART_SendData(USART1, *pt);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);<span class="comment">//等待发送完成</span></span><br><span class="line">		pt++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span> <span class="params">(<span class="keyword">int</span> c, FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TXE) != SET);<span class="comment">//确保发送缓冲区为空，只有发送缓冲区为空才继续发送</span></span><br><span class="line">	USART_SendData(USART1, c);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET);<span class="comment">//等待发送完成</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);  <span class="comment">//等待直到接收缓冲区内非空</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">int</span>)USART_ReceiveData(USART1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == SET)</span><br><span class="line">	&#123;</span><br><span class="line">		ch = USART_ReceiveData(USART1);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, ch + <span class="number">1</span>);</span><br><span class="line">	&#125;			</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_uart.h</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_UART_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_UART_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uart1_NVIC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十六）睡眠模式"><a href="#（十六）睡眠模式" class="headerlink" title="（十六）睡眠模式"></a>（十六）睡眠模式</h2><img src="/2019/01/05/STM32/image-20220209171108253.png" alt="image-20220209171108253" style="zoom: 50%;">

<img src="/2019/01/05/STM32/image-20220209171130729.png" alt="image-20220209171130729" style="zoom:67%;">

<img src="/2019/01/05/STM32/image-20220209173602568.png" alt="image-20220209173602568" style="zoom:67%;">

<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">	PA0_EXTI0_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_SET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_RESET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		__WFI();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_exti.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA0_EXTI0_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//ÐÞ¸ÄµÄµØ·½</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);</span><br><span class="line">	</span><br><span class="line">	EXTI_InitStructure.EXTI_Line = EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI0_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0) != RESET)</span><br><span class="line">	&#123;</span><br><span class="line"><span class="comment">//		GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;</span></span><br><span class="line"><span class="comment">//		wait(5000000);</span></span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十七）停止模式"><a href="#（十七）停止模式" class="headerlink" title="（十七）停止模式"></a>（十七）停止模式</h2><p><img src="/2019/01/05/STM32/image-20220222090209160.png" alt="image-20220222090209160"></p>
<img src="/2019/01/05/STM32/image-20220222090704600.png" alt="image-20220222090704600" style="zoom:50%;">

<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">	PA0_EXTI0_Configuration();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_SET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_RESET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);</span><br><span class="line">		PWR_EnterSTOPMode(PWR_Regulator_LowPower, PWR_STOPEntry_WFI);</span><br><span class="line">		<span class="comment">//唤醒后没有重新初始化HSI和HSE，高速内部和外部时钟还是处于关闭状态，40KHz与72MHz相差较大，导致灯闪烁频率明显变慢，在中断处理函数中重新让CPU工作频率变为HSI和HSE</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_SET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">			GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_RESET);</span><br><span class="line">			Delay_us(<span class="number">200000</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_exti.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA0_EXTI0_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//?????</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);</span><br><span class="line">	</span><br><span class="line">	EXTI_InitStructure.EXTI_Line = EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetSysClock_to_72MHZ</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __IO <span class="keyword">uint32_t</span> StartUpCounter = <span class="number">0</span>, HSEStatus = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/</span>    </span><br><span class="line">  <span class="comment">/* Enable HSE */</span>    </span><br><span class="line">  RCC-&gt;CR |= ((<span class="keyword">uint32_t</span>)RCC_CR_HSEON);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Wait till HSE is ready and if Time out is reached exit */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;</span><br><span class="line">    StartUpCounter++;  </span><br><span class="line">  &#125; <span class="keyword">while</span>((HSEStatus == <span class="number">0</span>) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((RCC-&gt;CR &amp; RCC_CR_HSERDY) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x00</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HSEStatus == (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Enable Prefetch Buffer */</span></span><br><span class="line">    FLASH-&gt;ACR |= FLASH_ACR_PRFTBE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Flash 2 wait state */</span></span><br><span class="line">    FLASH-&gt;ACR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~FLASH_ACR_LATENCY);</span><br><span class="line">    FLASH-&gt;ACR |= (<span class="keyword">uint32_t</span>)FLASH_ACR_LATENCY_2;    </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* HCLK = SYSCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_HPRE_DIV1;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* PCLK2 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE2_DIV1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* PCLK1 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE1_DIV2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STM32F10X_CL</span></span><br><span class="line">    <span class="comment">/* Configure PLLs ------------------------------------------------------*/</span></span><br><span class="line">    <span class="comment">/* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */</span></span><br><span class="line">    <span class="comment">/* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */</span></span><br><span class="line">        </span><br><span class="line">    RCC-&gt;CFGR2 &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |</span><br><span class="line">                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);</span><br><span class="line">    RCC-&gt;CFGR2 |= (<span class="keyword">uint32_t</span>)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |</span><br><span class="line">                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Enable PLL2 */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLL2ON;</span><br><span class="line">    <span class="comment">/* Wait till PLL2 is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLL2RDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */</span> </span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | </span><br><span class="line">                            RCC_CFGR_PLLMULL9); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>    </span></span><br><span class="line">    <span class="comment">/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |</span><br><span class="line">                                        RCC_CFGR_PLLMULL));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* STM32F10X_CL */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable PLL */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLLON;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Select PLL as system clock source */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_SW));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_SW_PLL;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is used as system clock source */</span></span><br><span class="line">    <span class="keyword">while</span> ((RCC-&gt;CFGR &amp; (<span class="keyword">uint32_t</span>)RCC_CFGR_SWS) != (<span class="keyword">uint32_t</span>)<span class="number">0x08</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; <span class="comment">/* If HSE fails to start-up, the application will have wrong clock </span></span><br><span class="line"><span class="comment">         configuration. User can add here some code to deal with this error */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> EXTI0_IRQHandler(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0) != RESET)</span><br><span class="line">	&#123;</span><br><span class="line"><span class="comment">//		GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;</span></span><br><span class="line"><span class="comment">//		wait(5000000);</span></span><br><span class="line">		SetSysClock_to_72MHZ();</span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十八）待机模式"><a href="#（十八）待机模式" class="headerlink" title="（十八）待机模式"></a>（十八）待机模式</h2><p>​        待机模式可实现系统的最低功耗。该模式是在Cortex-M3深睡眠模式时关闭电压调节器。整个1.8V供电区域被断电。PLL、HSI和HSE振荡器也被断电。SRAM和寄存器内容丢失。只有备份的寄存器和待机电路维持供电。</p>
<p><img src="/2019/01/05/STM32/image-20220222095315388.png" alt="image-20220222095315388"></p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Led_Key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_iwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_wwdg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_Configuration();</span><br><span class="line">	</span><br><span class="line">	Led_Configuration();</span><br><span class="line">	</span><br><span class="line">	PA5_EXTI5_Configuration();</span><br><span class="line">	</span><br><span class="line">	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_SET);</span><br><span class="line">		Delay_us(<span class="number">200000</span>);</span><br><span class="line">		GPIO_WriteBit(GPIOA, GPIO_Pin_1 |  GPIO_Pin_2 |  GPIO_Pin_3 |  GPIO_Pin_4, Bit_RESET);</span><br><span class="line">		Delay_us(<span class="number">200000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>bsp_exti.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_exti.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> nCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(nCount--)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA0_EXTI0_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//?????</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);</span><br><span class="line">	</span><br><span class="line">	EXTI_InitStructure.EXTI_Line = EXTI_Line0;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PA5_EXTI5_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	EXTI_InitTypeDef EXTI_InitStructure;</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);	</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//?????</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource5);</span><br><span class="line">	</span><br><span class="line">	EXTI_InitStructure.EXTI_Line = EXTI_Line5;</span><br><span class="line">	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">	EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">	EXTI_Init(&amp;EXTI_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetSysClock_to_72MHZ</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __IO <span class="keyword">uint32_t</span> StartUpCounter = <span class="number">0</span>, HSEStatus = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/</span>    </span><br><span class="line">  <span class="comment">/* Enable HSE */</span>    </span><br><span class="line">  RCC-&gt;CR |= ((<span class="keyword">uint32_t</span>)RCC_CR_HSEON);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Wait till HSE is ready and if Time out is reached exit */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;</span><br><span class="line">    StartUpCounter++;  </span><br><span class="line">  &#125; <span class="keyword">while</span>((HSEStatus == <span class="number">0</span>) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((RCC-&gt;CR &amp; RCC_CR_HSERDY) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x00</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HSEStatus == (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Enable Prefetch Buffer */</span></span><br><span class="line">    FLASH-&gt;ACR |= FLASH_ACR_PRFTBE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Flash 2 wait state */</span></span><br><span class="line">    FLASH-&gt;ACR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~FLASH_ACR_LATENCY);</span><br><span class="line">    FLASH-&gt;ACR |= (<span class="keyword">uint32_t</span>)FLASH_ACR_LATENCY_2;    </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* HCLK = SYSCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_HPRE_DIV1;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* PCLK2 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE2_DIV1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* PCLK1 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE1_DIV2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STM32F10X_CL</span></span><br><span class="line">    <span class="comment">/* Configure PLLs ------------------------------------------------------*/</span></span><br><span class="line">    <span class="comment">/* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */</span></span><br><span class="line">    <span class="comment">/* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */</span></span><br><span class="line">        </span><br><span class="line">    RCC-&gt;CFGR2 &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |</span><br><span class="line">                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);</span><br><span class="line">    RCC-&gt;CFGR2 |= (<span class="keyword">uint32_t</span>)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |</span><br><span class="line">                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Enable PLL2 */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLL2ON;</span><br><span class="line">    <span class="comment">/* Wait till PLL2 is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLL2RDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */</span> </span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | </span><br><span class="line">                            RCC_CFGR_PLLMULL9); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>    </span></span><br><span class="line">    <span class="comment">/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |</span><br><span class="line">                                        RCC_CFGR_PLLMULL));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* STM32F10X_CL */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable PLL */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLLON;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Select PLL as system clock source */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_SW));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_SW_PLL;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is used as system clock source */</span></span><br><span class="line">    <span class="keyword">while</span> ((RCC-&gt;CFGR &amp; (<span class="keyword">uint32_t</span>)RCC_CFGR_SWS) != (<span class="keyword">uint32_t</span>)<span class="number">0x08</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; <span class="comment">/* If HSE fails to start-up, the application will have wrong clock </span></span><br><span class="line"><span class="comment">         configuration. User can add here some code to deal with this error */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> EXTI0_IRQHandler(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line0) != RESET)</span><br><span class="line">	&#123;</span><br><span class="line"><span class="comment">//		GPIOA-&gt;ODR ^= GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;</span></span><br><span class="line"><span class="comment">//		wait(5000000);</span></span><br><span class="line">		SetSysClock_to_72MHZ();</span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI9_5_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(EXTI_GetITStatus(EXTI_Line5) != RESET)</span><br><span class="line">	&#123;</span><br><span class="line">		PWR_WakeUpPinCmd(ENABLE);</span><br><span class="line">		PWR_EnterSTANDBYMode();</span><br><span class="line">		EXTI_ClearITPendingBit(EXTI_Line5);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="（十九）DMA"><a href="#（十九）DMA" class="headerlink" title="（十九）DMA"></a>（十九）DMA</h2>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试相关术语</title>
    <url>/2019/10/20/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="渗透测试相关术语"><a href="#渗透测试相关术语" class="headerlink" title="渗透测试相关术语"></a>渗透测试相关术语</h1><span id="more"></span>

<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a><strong>IP地址</strong></h4><p>IP地址（Internet Protocol Address）是指互联⽹协议地址，⼜译为⽹际协议地址。IP地址是IP协议提供的⼀种统⼀的地址格式，它为互联⽹上的每⼀个⽹络和每⼀台主机分配⼀个逻辑地址，以此来屏蔽物理地址的差异。渗透测试中，IP地址⼀般出现在服务器、PC、路由交换等设备中，可以把IP地址理解成我们⽣活中的家庭地址。 </p>
<h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a><strong>VPS</strong></h4><p>Virtual Private Server 虚拟专⽤服务器技术，将⼀台服务器分割成多个虚拟专享服务器的优质服务。我 们⼀般⼈通常说的VPS就是⼀台⼈家虚拟出来的服务器，这台服务器有外⽹IP，我们可以装好系统并直接连 接。 </p>
<h4 id="端⼝"><a href="#端⼝" class="headerlink" title="端⼝"></a><strong>端⼝</strong></h4><p>“端⼝”是英⽂port的意译，可以认为是设备与外界通讯交流的进出⼝。 </p>
<h4 id="⼀句话⽊马"><a href="#⼀句话⽊马" class="headerlink" title="⼀句话⽊马"></a><strong>⼀句话⽊马</strong></h4><p>指的是那些代码长度很短的脚本⽊马，⼀般只有⼀⾏，跟平常的⼀句话长度差不多。例如asp的其 中⼀种⼀句话⽊马： &lt;%execute(request(“value”))%&gt; </p>
<h4 id="⼤马"><a href="#⼤马" class="headerlink" title="⼤马"></a><strong>⼤马</strong></h4><p>指的是那些功能很多的脚本⽊马，⼀般都包含但不限于⽂件管理、cmd执⾏、可读写⽬录查找，例如 redhat的⼤马还有提权难易程度检测功能。</p>
<h4 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a><strong>Webshell</strong></h4><p>指的是已经在某个web植⼊脚本⽊马，且该⽊马能被解析成脚本⽂件，并能被访问到，能通过这个 ⽂件控制web。 </p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a><strong>URL</strong></h4><p>专业⼀点就称为“统⼀资源定位符”。像我业余的，就把他理解成链接。更有专业的对⽐：⽹址和URL之间 的区别 </p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a><strong>提权</strong></h4><p>也称权限提升，顾名思义，就是把我们⾃⼰的权限提起升⾼，提权都需要利⽤到漏洞。 </p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a><strong>POC</strong></h4><p>全称proof of concept，译作“概念验证”，它可以是⼀段代码也可以是⼀个程序，⽤作验证某个漏洞是 存在的，没有破坏能⼒。 </p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a><strong>EXP</strong></h4><p>全称exploit，指的是漏洞利⽤程序，这种程序可以是任何语⾔编写的，具有破坏能⼒。 </p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h4><p>译作”有效载荷“，当exploit利⽤成功后将执⾏payload。</p>
<h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a><strong>shellcode</strong></h4><p>漏洞利⽤的过程，就是把shellcode发送到⽬标服务器，其中shellcode包含payload，如果shellcode 被成功执⾏，那么才会执⾏有效载荷payload，这个载荷可以是⼀条os命令，可以是⼀段⼆进制代码。 </p>
<h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a><strong>CMS</strong></h4><p>内容管理系统，简单来说就是⼀种⽹站系统模板，很多⽹站都是⽤同⼀种模板改的。 </p>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a><strong>反序列化</strong></h4><p>只将字节序列转换成⽬标对象的过程。</p>
<h4 id="Fuzz测试"><a href="#Fuzz测试" class="headerlink" title="Fuzz测试"></a><strong>Fuzz测试</strong></h4><p>是⼀种安全测试⽅法，他介于完全的⼿⼯测试和完全的⾃动化测试之间。模糊测试（fuzz testing）是一种安全测试方法，他介于完全的手工测试和完全的自动化测试之间。（<a href="https://www.cnblogs.com/forwill/p/5756634.html%EF%BC%89">https://www.cnblogs.com/forwill/p/5756634.html）</a></p>
]]></content>
      <categories>
        <category>渗透测试相关术语</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/02/C&amp;C++%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="C-C-笔试题、面试题难点解析"><a href="#C-C-笔试题、面试题难点解析" class="headerlink" title="C/C++笔试题、面试题难点解析"></a>C/C++笔试题、面试题难点解析</h1><h3 id="1、char-const-next-请对这行代码进行一下解释？"><a href="#1、char-const-next-请对这行代码进行一下解释？" class="headerlink" title="1、char *const *(*next)();请对这行代码进行一下解释？"></a>1、<code>char *const *(*next)();</code>请对这行代码进行一下解释？</h3><p>1）函数指针</p>
<p>2）const和指针之间关系（指向常量的指针，以及指针常量）</p>
<p>1.<code>(*next)</code>  —-&gt;next是个指针</p>
<p>2.<code>(*next)()</code>—&gt;next是个函数指针</p>
<p>3.<code>char *const</code> —-&gt; 应该是一个指针，常量指针</p>
<p>4.<code>char *const *(*next)()</code> —-&gt; </p>
<p>next是个函数指针，它指向一个没有参数的函数，并且该函数的返回值是一个指针，该指针指向一个类型为char的常量指针。</p>
]]></content>
  </entry>
</search>
